type Query {
    customers: [Customer]!
#    customerById(id: ID!): Customer
    customerById(id: ID!): CustomerResponse!    # used to demo client handling of union type
}

type Mutation {
    createCustomer(customer: CustomerRequest!): Customer
    updateCustomer(id: ID!, customer: CustomerRequest!): Customer
    deleteCustomer(id: ID!): DeleteResponse!
}

type Customer {
    id: ID!
    name: String
    age: Int
    city: String
}

input CustomerRequest {
    name: String
    age: Int
    city: String
}

type DeleteResponse {
    id: ID!
    status: Status!
}

enum Status {
    SUCCESS
    FAILURE
}

# used to demo client handling of union type: uncomment union CustomerResponse and type CustomerNotFound

union CustomerResponse = Customer | CustomerNotFound

type CustomerNotFound {
    id: ID!
    message: String
}